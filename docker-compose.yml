

services:
  kitchenai:
    image: epuerta18/kitchenai-bundle:latest
    ports:
      - "8001:8001"
    # Uncomment the following line to use an .env file for environment variables
    # env_file:
    #   - .env
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DEBUG: "False"
      KITCHENAI_LOCAL: "False"
      KITCHENAI_LICENSE: "oss"
      ALLOWED_HOSTS: "*"
      CSRF_TRUSTED_ORIGINS: ""
      CACHE_LOCATION: ""
      KITCHENAI_REDIS_CACHE: "False"
      REDIS_LOCATION: "redis://127.0.0.1:6379/1"
      DATABASE_URL: "postgres://postgres:postgres@postgres:5432/postgres"
      CONN_MAX_AGE: "60"
      DEFAULT_FROM_EMAIL: "example@example.com"
      SECRET_KEY: "django-insecure-ef6nIh7LcUjPtixFdz0_aXyUwlKqvBdJEcycRR6RvRY"
      MEDIA_ROOT: "./media"
      SECURE_HSTS_SECONDS: "120"
      SECURE_HSTS_INCLUDE_SUBDOMAINS: "True"
      SECURE_HSTS_PRELOAD: "True"
      SESSION_COOKIE_SECURE: "True"
      SERVER_EMAIL: "example@example.com"
      AWS_ACCESS_KEY_ID: "minioadmin"
      AWS_SECRET_ACCESS_KEY: "minioadmin"
      AWS_STORAGE_BUCKET_NAME: "kitchenai"
      AWS_S3_ENDPOINT_URL: "http://minio:9000"
      AWS_DEFAULT_REGION: "us-east-1"
      AWS_S3_ADDRESSING_STYLE: "path"
      AWS_S3_USE_SSL: "True"
      AWS_S3_VERIFY: "True"
      USE_S3: "False"
      DJANGO_ALLOW_REGISTRATION: "True"
      RESEND_API_KEY: ""
      ADMIN_URL: "kitchenai-admin/"
      KITCHENAI_LLM_PROVIDER: "openai"
      KITCHENAI_LLM_MODEL: "gpt-4o"
      KITCHENAI_AUTH: "False"
      KITCHENAI_JWT_SECRET: ""
      WHISK_USER: "kitchenai"
      WHISK_PASSWORD: "kitchenai_admin"
      NATS_URL: "nats://nats:4222"
      KITCHENAI_THEME: "winter"
    #command: python kitchenai/ run --module kitchenai.dynamic.app:kitchen
    command: python kitchenai/ run
    depends_on:
      kitchenai-setup:
        condition: service_completed_successfully


  kitchenai-qcluster:
    image: epuerta18/kitchenai-bundle:latest
    depends_on:
      kitchenai-setup:
        condition: service_completed_successfully
    environment:
      - KITCHENAI_LOCAL=False
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres
      - VECTOR_STORE_ENDPOINT=localhost
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    # env_file:
    #   - .env
    command: python manage.py qcluster

  kitchenai-setup:
    image: epuerta18/kitchenai-bundle:latest
    command: >
      sh -c "python kitchenai/ init"    
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres
      - KITCHENAI_LOCAL=False
    # env_file:
    #   - .env


  nats:
      image: nats:latest
      command: ["-c", "/etc/nats/nats-server.conf"]
      ports:
        - "4222:4222"
        - "8222:8222"
        - "6222:6222"
      volumes:
        #bind config when a more robust config is needed
        - ./config/nats-playground.conf:/etc/nats/nats-server.conf
        - nats-data:/data
      # env_file:
      #   - ./config/nats/.env

  postgres:
    image: pgvector/pgvector:pg17
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  chroma:
    image: chromadb/chroma:latest
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8000:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - ALLOW_RESET=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 10s
      timeout: 5s
      retries: 5


  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes



  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: "minioadmin"
      MINIO_ROOT_PASSWORD: "minioadmin"
      MINIO_DEFAULT_BUCKETS: "my-bucket:public"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"



volumes:
  redis_data:
  postgres_data:
  minio_data:
  chroma_data:
  nats-data:
    driver: local